<?php

/**
 * @file mailchimp_campaigngrab.module
 */

/**
 * Implements hook_menu().
 *
 * Show a list of potential webhook campaign endpoint URLs to be included
 * in the MailChimp.com-side configuration
 */
function mailchimp_campaigngrab_menu() {
  $items = array();

  $items['admin/config/services/mailchimp/campaigngrab'] = array(
    'title' => 'Campaign Grabber',
    'description' => 'Grab campaigns when MailChimp sends them',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_campaigngrab_admin'),
    'access arguments' => array('administer mailchimp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailchimp_campaigngrab.admin.inc',
    'weight' => -10
  );

  $items['admin/config/services/mailchimp/campaigns/%mailchimp_campaign/createnode'] = array(
    'title' => 'Create node',
    'page callback' => 'mailchimp_campaigngrab_createnode',
    'page arguments' => array(5),
    'access arguments' => array('administer mailchimp'),
    'file' => 'mailchimp_campaigngrab.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );

  return $items;
}

/**
 * Implements hook_mailchimp_process_webhook().
 *
 * If the webhook is a campaign send, create a record of that campaign being
 * sent.
 */
function mailchimp_campaigngrab_mailchimp_process_webhook($type, $data) {
  if ($type == 'campaign' && $data['status'] == 'sent') {
    $q = mailchimp_get_api_object();
    // mailchimp_campaigns expects $template to be a drupal render array
    // so we grab a mailchimp-looking format and modify the template values:
    // 'template' => array('value' => $template, 'format' => $mc_format)
    $mc_format = (array_key_exists('mailchimp_campaign', filter_formats())) ? 'mailchimp_campaign' : 'plain_text';
    $template = $q->campaignTemplateContent($data['id']);
    $renderable_template = array();
    foreach ($template as $fieldname => $fieldvalue) {
      $renderable_template[$fieldname]['format'] = $mc_format;
      $renderable_template[$fieldname]['value'] = $fieldvalue;
    }
    $campaign = entity_create('mailchimp_campaign', array(
      'mc_campaign_id' => $data['id'],
      'template' => $renderable_template,
      'subject' => $data['subject'],
    ));
    mailchimp_campaign_save($campaign);
  }
}

/**
 * Implements drupal_alter().
 *
 * Adds an action to the MailChimp Campaigns page to copy a campaign as a new
 * node.
 */
function mailchimp_campaigngrab_mailchimp_campaign_actions_alter(&$actions, $context) {
  $content = array();
  if (gettype($context['campaign']->template) == 'string') {
    // let's not allow for converting non-template campaigns quite yet...
    //$content['email']['format'] = 'mailchimp_campaign';
    //$content['email']['value'] = $context['campaign']->template;
  }
  else if (gettype($context['campaign']->template) == 'array') {
    $content = _mailchimp_campaigngrab_templateregions($context['campaign']->template);
  }
  if (count($content) > 0) {
    $actions[] = l('Create node', 'admin/config/services/mailchimp/campaigns/' . $context['campaign']->mc_campaign_id . '/createnode');
  }
}

/**
 * Return a render array of template regions that we want to grab
 *
 * @param array $template
 *   MailChimpCampaign->template
 * @return array
 */
function _mailchimp_campaigngrab_templateregions($template) {
  $content = array();
  $regions_to_grab = explode(',', variable_get('mailchimp_campaigngrab_templateregions'));
  foreach ($regions_to_grab as $region) {
    if (array_key_exists($region, $template)) {
      $content[$region] = $template[$region];
    }
  }
  return $content;
}


